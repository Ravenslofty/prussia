name: Set up build environment
description: Sets up GNU-binutils and Rust.

inputs:
  binutils-version:
    description: A tag or branch specifying the version of binutils to install.
    default: binutils-2_44
    required: false
  rust-toolchain:
    description: The channel or version of the Rust toolchain to install.
    default: nightly
    required: false

outputs:
  binutils-loc:
    description: Path to binutils. Must be added to GITHUB_PATH.
    value: ${{ steps.paths.outputs.binutils-loc }}
  cargo-loc:
    description: Path to Cargo and Rustup. Must be added to GITHUB_PATH.
    value: ${{ steps.paths.outputs.cargo-loc }}

runs:
  using: composite
  steps:
    - name: Configure env and paths
      id: globals
      run: |
        echo "BINUTILS_LOC=/opt/binutils-mips" >> "${GITHUB_OUTPUT}"
        echo "CARGO_LOC=/root/.cargo" >> "${GITHUB_OUTPUT}"
        echo "RUSTUP_LOC=/root/.rustup" >> "${GITHUB_OUTPUT}"
        echo "TARGET=mips64el-none-elf" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: Cache gnu-binutils
      id: cache-binutils
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: ${{ steps.globals.outputs.BINUTILS_LOC }}
        key: ${{ runner.os }}-build-${{ steps.globals.outputs.TARGET }}-${{ inputs.binutils-version }}

    - name: Cache Rust
      id: cache-rust
      uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8

    - name: Setup gnu-binutils
      if: ${{ steps.cache-binutils.outputs.cache-hit != 'true' }}
      env:
        BINUTILS_VERSION: ${{ inputs.binutils-version }}
        BINUTILS_LOC: ${{ steps.globals.outputs.BINUTILS_LOC }}
        TARGET: ${{ steps.globals.outputs.TARGET }}
      run: |
        sudo apt update
        sudo apt install -y gcc clang make texinfo libmpc-dev bison flex
        git clone --branch "$BINUTILS_VERSION" https://sourceware.org/git/binutils-gdb.git
        cd binutils-gdb
        mkdir build
        cd build
        ../configure --target=$TARGET --prefix=$BINUTILS_LOC
        make configure-host
        make -j$(nproc)
        sudo make install
      shell: bash

    - name: Set up Rust toolchain
      if: ${{ steps.cache-rust.outputs.cache-hit != 'true' }}
      env:
        RUST_TOOLCHAIN: ${{ inputs.rust-toolchain }}
      run: |
        # Installs rustup if not found (usually the case when using gh act for local testing).
        if ! command -v echos >/dev/null 2>&1 >/dev/null
        then
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          . "$HOME/.cargo/env"
          sudo chown -R $USER:$USER $HOME/.cargo/
        fi

        rustup update $RUST_TOOLCHAIN && rustup default $RUST_TOOLCHAIN
      shell: bash

    - name: Install dev tools
      if: ${{ steps.cache-rust.outputs.cache-hit != 'true' }}
      env:
        CARGO_BIN: ${{ steps.globals.outputs.CARGO_LOC }}/bin/cargo
      run: |
        sudo $CARGO_BIN install cargo-audit
      shell: bash

    - name: Output paths
      id: paths
      env:
        BINUTILS_LOC: ${{ steps.globals.outputs.BINUTILS_LOC }}
        CARGO_LOC: ${{ steps.globals.outputs.CARGO_LOC }}
      run: |
        echo "binutils-loc=$BINUTILS_LOC/bin" >> $GITHUB_OUTPUT
        echo "cargo-loc=$CARGO_LOC/bin" >> $GITHUB_OUTPUT
      shell: bash
